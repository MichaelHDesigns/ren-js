/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class RenToken extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): RenToken;
  address: string;
  methods: {
    INITIAL_SUPPLY(): TransactionObject<string>;

    addPauser(account: string): TransactionObject<void>;

    allowance(owner: string, spender: string): TransactionObject<string>;

    approve(
      spender: string,
      value: number | string
    ): TransactionObject<boolean>;

    balanceOf(account: string): TransactionObject<string>;

    burn(amount: number | string): TransactionObject<void>;

    burnFrom(account: string, amount: number | string): TransactionObject<void>;

    decimals(): TransactionObject<string>;

    decreaseAllowance(
      spender: string,
      subtractedValue: number | string
    ): TransactionObject<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: number | string
    ): TransactionObject<boolean>;

    initialize(
      name: string,
      symbol: string,
      decimals: number | string
    ): TransactionObject<void>;

    isOwner(): TransactionObject<boolean>;

    isPauser(account: string): TransactionObject<boolean>;

    name(): TransactionObject<string>;

    owner(): TransactionObject<string>;

    pause(): TransactionObject<void>;

    paused(): TransactionObject<boolean>;

    renounceOwnership(): TransactionObject<void>;

    renouncePauser(): TransactionObject<void>;

    symbol(): TransactionObject<string>;

    totalSupply(): TransactionObject<string>;

    transfer(to: string, value: number | string): TransactionObject<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: number | string
    ): TransactionObject<boolean>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    transferTokens(
      beneficiary: string,
      amount: number | string
    ): TransactionObject<boolean>;

    unpause(): TransactionObject<void>;
  };
  events: {
    Approval: ContractEvent<{
      owner: string;
      spender: string;
      value: string;
      0: string;
      1: string;
      2: string;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    Paused: ContractEvent<string>;
    PauserAdded: ContractEvent<string>;
    PauserRemoved: ContractEvent<string>;
    Transfer: ContractEvent<{
      from: string;
      to: string;
      value: string;
      0: string;
      1: string;
      2: string;
    }>;
    Unpaused: ContractEvent<string>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
