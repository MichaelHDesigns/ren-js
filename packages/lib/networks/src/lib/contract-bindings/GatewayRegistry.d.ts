/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class GatewayRegistry extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): GatewayRegistry;
  address: string;
  methods: {
    blacklistRecoverableToken(_token: string): TransactionObject<void>;

    claimOwnership(): TransactionObject<void>;

    getGatewayBySymbol(_tokenSymbol: string): TransactionObject<string>;

    getGatewayByToken(_token: string): TransactionObject<string>;

    getGateways(
      _start: string,
      _count: number | string
    ): TransactionObject<string[]>;

    getRenTokens(
      _start: string,
      _count: number | string
    ): TransactionObject<string[]>;

    getTokenBySymbol(_tokenSymbol: string): TransactionObject<string>;

    initialize(_nextOwner: string): TransactionObject<void>;

    isOwner(): TransactionObject<boolean>;

    owner(): TransactionObject<string>;

    pendingOwner(): TransactionObject<string>;

    recoverTokens(_token: string): TransactionObject<void>;

    removeGateway(_symbol: string): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    setGateway(
      _symbol: string,
      _token: string,
      _gatewayContract: string
    ): TransactionObject<void>;

    symbolIsValid(_tokenSymbol: string): TransactionObject<boolean>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    updateGateway(
      _token: string,
      _newGatewayContract: string
    ): TransactionObject<void>;
  };
  events: {
    LogGatewayDeregistered: ContractEvent<{
      _symbol: string;
      _indexedSymbol: string;
      _token: string;
      _gatewayContract: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
    LogGatewayRegistered: ContractEvent<{
      _symbol: string;
      _indexedSymbol: string;
      _token: string;
      _gatewayContract: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;
    LogGatewayUpdated: ContractEvent<{
      _token: string;
      _currentGatewayContract: string;
      _newGatewayContract: string;
      0: string;
      1: string;
      2: string;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
