import {
    BurnAndReleaseTransaction,
    DepositCommon,
    LockAndMintTransaction,
    RenNetwork,
} from "@renproject/interfaces";

/**
 * A pair of transactions from a sourceChain to a destChain
 */
export interface GatewayTransaction {
    /* Hash of output transaction */
    destTxHash?: string;
    /**
     * Transaction amount in the minimum denomination (eg. SATs for Bitcoin)
     */
    sourceTxAmount: number;
    /**
     * The RenVM Tx hash when minting,
     * The host chain burn tx hash when burning
     */
    sourceTxHash: string;
    /**
     * Current confirmations on source transaction
     */
    sourceTxConfs: number;
    /**
     * How many confirmations needed to consider the source tx accepted
     */
    sourceTxConfTarget?: number;
    /* Hash of renVM transaction */
    renVMHash?: string;
    /**
     * Response to renvm signing request
     */
    renResponse?: LockAndMintTransaction | BurnAndReleaseTransaction;
    /**
     * Signature generated by renvm
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    renSignature?: any;
    /**
     * Underlying source chain tx
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rawSourceTx: DepositCommon<any>;

    /**
     * Underlying dest chain tx
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    rawDestTx?: any;
    /**
     * Additional parameters for constructing a custom transaction
     * Provided at the point of submission
     */
    contractParams?: any;
    /**
     * Latest error detected during processing a specific transaction
     */
    error?: Error;
}

/**
 * A Gateway Session represents the parameters used to create a Gateway Address
 * that can recieve assets to mint on RenVM; or construct the parameters required
 * for burning and releasing from RenVM
 */
export interface GatewaySession<CustomParams = any> {
    /**
     * A unique ID to identify the session
     */
    id: string;
    /**
     * Whether an asset is being locked and minted (mint), or burned and released (burn)
     */
    type: "mint" | "burn";
    /**
     * Ren network version to be used, which determines network versions for the selected chains
     */
    network: RenNetwork | "testnet" | "mainnet";
    /**
     * Asset to be minted/burned (on native chain)
     */
    sourceAsset: string;
    /**
     * Chain that the source asset is located on
     */
    sourceChain: string;
    /**
     * Address that will recieve the asset
     */
    destAddress: string;
    /**
     * Chain that the asset will be recieved on
     */
    destChain: string;
    /**
     * How much the user expects to recieve in destAsset (eg. BTC)
     */
    targetAmount: string | number;
    /**
     * Address that can cryptographically be proven to belong to a user
     */
    userAddress: string;
    /**
     * Amount of sourceAsset user is suggested to send in the minimum denomination (eg. SATs for Bitcoin)
     */
    suggestedAmount?: string | number;
    /**
     * Latest error detected during processing
     */
    error?: Error;

    /**
     * Random 32 bytes to make the gateway address reproducable
     */
    nonce?: string | Buffer;

    /**
     * Generated address on the source chain where assets should be sent to for a mint transaction
     */
    gatewayAddress?: string;
    /**
     * Unix time when gateway address will no longer accept deposits
     */
    expiryTime: number;
    /**
     * Transactions detected for this session, indexed by their sourceTxHash
     */
    transactions: { [key: string]: GatewayTransaction };

    /**
     * Extra parameters to be used for constructing to/from contract parameters
     */
    customParams: CustomParams;

    /**
     * Optional timestamp
     */
    createdAt?: number;

    /**
     * Optional timestamp
     */
    updatedAt?: number;
}
