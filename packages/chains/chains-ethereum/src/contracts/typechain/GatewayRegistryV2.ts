/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    BaseContract,
    BigNumber,
    BigNumberish,
    CallOverrides,
    ContractTransaction,
    ethers,
    Overrides,
    PopulatedTransaction,
    Signer,
} from "ethers";

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";

import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";

interface GatewayRegistryV2Interface extends ethers.utils.Interface {
    functions: {
        "CAN_ADD_GATEWAYS()": FunctionFragment;
        "CAN_UPDATE_GATEWAYS()": FunctionFragment;
        "DEFAULT_ADMIN_ROLE()": FunctionFragment;
        "__GatewayRegistry_init(string,uint256,address,address,address,address)": FunctionFragment;
        "__RenAssetFactory_init(address,address,address)": FunctionFragment;
        "addLockGateway(string,address,address)": FunctionFragment;
        "addMintGateway(string,address,address)": FunctionFragment;
        "chainId()": FunctionFragment;
        "chainName()": FunctionFragment;
        "deployLockGateway(string,address,string)": FunctionFragment;
        "deployMintGateway(string,address,string)": FunctionFragment;
        "deployMintGatewayAndRenAsset(string,string,string,uint8,string)": FunctionFragment;
        "getGatewayBySymbol(string)": FunctionFragment;
        "getGatewayByToken(address)": FunctionFragment;
        "getLockAssetBySymbol(string)": FunctionFragment;
        "getLockGatewayBySymbol(string)": FunctionFragment;
        "getLockGatewayByToken(address)": FunctionFragment;
        "getLockGatewaySymbols(uint256,uint256)": FunctionFragment;
        "getMintGatewayBySymbol(string)": FunctionFragment;
        "getMintGatewayByToken(address)": FunctionFragment;
        "getMintGatewaySymbols(uint256,uint256)": FunctionFragment;
        "getRenAssetBySymbol(string)": FunctionFragment;
        "getRoleAdmin(bytes32)": FunctionFragment;
        "getRoleMember(bytes32,uint256)": FunctionFragment;
        "getRoleMemberCount(bytes32)": FunctionFragment;
        "getTokenBySymbol(string)": FunctionFragment;
        "grantRole(bytes32,address)": FunctionFragment;
        "hasRole(bytes32,address)": FunctionFragment;
        "lockGatewayProxyBeacon()": FunctionFragment;
        "mintGatewayProxyBeacon()": FunctionFragment;
        "removeLockGateway(string)": FunctionFragment;
        "removeMintGateway(string)": FunctionFragment;
        "renAssetProxyBeacon()": FunctionFragment;
        "renounceRole(bytes32,address)": FunctionFragment;
        "revokeRole(bytes32,address)": FunctionFragment;
        "signatureVerifier()": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "updateSignatureVerifier(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "CAN_ADD_GATEWAYS",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "CAN_UPDATE_GATEWAYS",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "__GatewayRegistry_init",
        values: [string, BigNumberish, string, string, string, string],
    ): string;
    encodeFunctionData(
        functionFragment: "__RenAssetFactory_init",
        values: [string, string, string],
    ): string;
    encodeFunctionData(
        functionFragment: "addLockGateway",
        values: [string, string, string],
    ): string;
    encodeFunctionData(
        functionFragment: "addMintGateway",
        values: [string, string, string],
    ): string;
    encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "chainName",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "deployLockGateway",
        values: [string, string, string],
    ): string;
    encodeFunctionData(
        functionFragment: "deployMintGateway",
        values: [string, string, string],
    ): string;
    encodeFunctionData(
        functionFragment: "deployMintGatewayAndRenAsset",
        values: [string, string, string, BigNumberish, string],
    ): string;
    encodeFunctionData(
        functionFragment: "getGatewayBySymbol",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getGatewayByToken",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getLockAssetBySymbol",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getLockGatewayBySymbol",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getLockGatewayByToken",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getLockGatewaySymbols",
        values: [BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "getMintGatewayBySymbol",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getMintGatewayByToken",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getMintGatewaySymbols",
        values: [BigNumberish, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "getRenAssetBySymbol",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleAdmin",
        values: [BytesLike],
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleMember",
        values: [BytesLike, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "getRoleMemberCount",
        values: [BytesLike],
    ): string;
    encodeFunctionData(
        functionFragment: "getTokenBySymbol",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "grantRole",
        values: [BytesLike, string],
    ): string;
    encodeFunctionData(
        functionFragment: "hasRole",
        values: [BytesLike, string],
    ): string;
    encodeFunctionData(
        functionFragment: "lockGatewayProxyBeacon",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "mintGatewayProxyBeacon",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "removeLockGateway",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "removeMintGateway",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "renAssetProxyBeacon",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "renounceRole",
        values: [BytesLike, string],
    ): string;
    encodeFunctionData(
        functionFragment: "revokeRole",
        values: [BytesLike, string],
    ): string;
    encodeFunctionData(
        functionFragment: "signatureVerifier",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "supportsInterface",
        values: [BytesLike],
    ): string;
    encodeFunctionData(
        functionFragment: "updateSignatureVerifier",
        values: [string],
    ): string;

    decodeFunctionResult(
        functionFragment: "CAN_ADD_GATEWAYS",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "CAN_UPDATE_GATEWAYS",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "DEFAULT_ADMIN_ROLE",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "__GatewayRegistry_init",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "__RenAssetFactory_init",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "addLockGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "addMintGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "chainName",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "deployLockGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "deployMintGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "deployMintGatewayAndRenAsset",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getGatewayBySymbol",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getGatewayByToken",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getLockAssetBySymbol",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getLockGatewayBySymbol",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getLockGatewayByToken",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getLockGatewaySymbols",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMintGatewayBySymbol",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMintGatewayByToken",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getMintGatewaySymbols",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRenAssetBySymbol",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleAdmin",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleMember",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getRoleMemberCount",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "getTokenBySymbol",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "grantRole",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "lockGatewayProxyBeacon",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "mintGatewayProxyBeacon",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeLockGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "removeMintGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "renAssetProxyBeacon",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "renounceRole",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "revokeRole",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "signatureVerifier",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "supportsInterface",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "updateSignatureVerifier",
        data: BytesLike,
    ): Result;

    events: {
        "LogLockGatewayDeleted(string,string)": EventFragment;
        "LogLockGatewayUpdated(string,string,address,address)": EventFragment;
        "LogMintGatewayDeleted(string,string)": EventFragment;
        "LogMintGatewayUpdated(string,string,address,address)": EventFragment;
        "LogSignatureVerifierUpdated(address)": EventFragment;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
        "RoleGranted(bytes32,address,address)": EventFragment;
        "RoleRevoked(bytes32,address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "LogLockGatewayDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogLockGatewayUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogMintGatewayDeleted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogMintGatewayUpdated"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "LogSignatureVerifierUpdated",
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type LogLockGatewayDeletedEvent = TypedEvent<
    [string, string] & { symbol: string; indexedSymbol: string }
>;

export type LogLockGatewayUpdatedEvent = TypedEvent<
    [string, string, string, string] & {
        symbol: string;
        indexedSymbol: string;
        token: string;
        gatewayContract: string;
    }
>;

export type LogMintGatewayDeletedEvent = TypedEvent<
    [string, string] & { symbol: string; indexedSymbol: string }
>;

export type LogMintGatewayUpdatedEvent = TypedEvent<
    [string, string, string, string] & {
        symbol: string;
        indexedSymbol: string;
        token: string;
        gatewayContract: string;
    }
>;

export type LogSignatureVerifierUpdatedEvent = TypedEvent<
    [string] & { newSignatureVerifier: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
    [string, string, string] & {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
>;

export type RoleGrantedEvent = TypedEvent<
    [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
    [string, string, string] & { role: string; account: string; sender: string }
>;

export interface GatewayRegistryV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: GatewayRegistryV2Interface;

    functions: {
        CAN_ADD_GATEWAYS(overrides?: CallOverrides): Promise<[string]>;

        CAN_UPDATE_GATEWAYS(overrides?: CallOverrides): Promise<[string]>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

        __GatewayRegistry_init(
            chainName_: string,
            chainId_: BigNumberish,
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            adminAddress_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        __RenAssetFactory_init(
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        addLockGateway(
            symbol_: string,
            lockAsset_: string,
            lockGateway_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        addMintGateway(
            symbol_: string,
            renAsset_: string,
            mintGateway_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

        chainName(overrides?: CallOverrides): Promise<[string]>;

        deployLockGateway(
            symbol_: string,
            lockToken: string,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        deployMintGateway(
            symbol_: string,
            renAsset_: string,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        deployMintGatewayAndRenAsset(
            symbol_: string,
            erc20Name_: string,
            erc20Symbol_: string,
            erc20Decimals_: BigNumberish,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        getGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getLockAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getLockGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getLockGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getLockGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string[]]>;

        getMintGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getMintGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getMintGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string[]]>;

        getRenAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getRoleMember(
            role: BytesLike,
            index: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        getRoleMemberCount(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<[BigNumber]>;

        getTokenBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<[string]>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        lockGatewayProxyBeacon(overrides?: CallOverrides): Promise<[string]>;

        mintGatewayProxyBeacon(overrides?: CallOverrides): Promise<[string]>;

        removeLockGateway(
            symbol_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        removeMintGateway(
            symbol_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        renAssetProxyBeacon(overrides?: CallOverrides): Promise<[string]>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        signatureVerifier(overrides?: CallOverrides): Promise<[string]>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides,
        ): Promise<[boolean]>;

        updateSignatureVerifier(
            nextSignatureVerifier_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    CAN_ADD_GATEWAYS(overrides?: CallOverrides): Promise<string>;

    CAN_UPDATE_GATEWAYS(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    __GatewayRegistry_init(
        chainName_: string,
        chainId_: BigNumberish,
        renAssetProxyBeacon_: string,
        mintGatewayProxyBeacon_: string,
        lockGatewayProxyBeacon_: string,
        adminAddress_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    __RenAssetFactory_init(
        renAssetProxyBeacon_: string,
        mintGatewayProxyBeacon_: string,
        lockGatewayProxyBeacon_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addLockGateway(
        symbol_: string,
        lockAsset_: string,
        lockGateway_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addMintGateway(
        symbol_: string,
        renAsset_: string,
        mintGateway_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    chainName(overrides?: CallOverrides): Promise<string>;

    deployLockGateway(
        symbol_: string,
        lockToken: string,
        version_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deployMintGateway(
        symbol_: string,
        renAsset_: string,
        version_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    deployMintGatewayAndRenAsset(
        symbol_: string,
        erc20Name_: string,
        erc20Symbol_: string,
        erc20Decimals_: BigNumberish,
        version_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getGatewayBySymbol(
        tokenSymbol_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getGatewayByToken(
        token_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getLockAssetBySymbol(
        tokenSymbol_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getLockGatewayBySymbol(
        tokenSymbol_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getLockGatewayByToken(
        token_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getLockGatewaySymbols(
        from_: BigNumberish,
        count_: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<string[]>;

    getMintGatewayBySymbol(
        tokenSymbol_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getMintGatewayByToken(
        token_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getMintGatewaySymbols(
        from_: BigNumberish,
        count_: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<string[]>;

    getRenAssetBySymbol(
        tokenSymbol_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
        role: BytesLike,
        index: BigNumberish,
        overrides?: CallOverrides,
    ): Promise<string>;

    getRoleMemberCount(
        role: BytesLike,
        overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getTokenBySymbol(
        tokenSymbol_: string,
        overrides?: CallOverrides,
    ): Promise<string>;

    grantRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(
        role: BytesLike,
        account: string,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    lockGatewayProxyBeacon(overrides?: CallOverrides): Promise<string>;

    mintGatewayProxyBeacon(overrides?: CallOverrides): Promise<string>;

    removeLockGateway(
        symbol_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeMintGateway(
        symbol_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renAssetProxyBeacon(overrides?: CallOverrides): Promise<string>;

    renounceRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
        role: BytesLike,
        account: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    signatureVerifier(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides,
    ): Promise<boolean>;

    updateSignatureVerifier(
        nextSignatureVerifier_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        CAN_ADD_GATEWAYS(overrides?: CallOverrides): Promise<string>;

        CAN_UPDATE_GATEWAYS(overrides?: CallOverrides): Promise<string>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

        __GatewayRegistry_init(
            chainName_: string,
            chainId_: BigNumberish,
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            adminAddress_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        __RenAssetFactory_init(
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        addLockGateway(
            symbol_: string,
            lockAsset_: string,
            lockGateway_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        addMintGateway(
            symbol_: string,
            renAsset_: string,
            mintGateway_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        chainId(overrides?: CallOverrides): Promise<BigNumber>;

        chainName(overrides?: CallOverrides): Promise<string>;

        deployLockGateway(
            symbol_: string,
            lockToken: string,
            version_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        deployMintGateway(
            symbol_: string,
            renAsset_: string,
            version_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        deployMintGatewayAndRenAsset(
            symbol_: string,
            erc20Name_: string,
            erc20Symbol_: string,
            erc20Decimals_: BigNumberish,
            version_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        getGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getLockAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getLockGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getLockGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getLockGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<string[]>;

        getMintGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getMintGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getMintGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<string[]>;

        getRenAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<string>;

        getRoleMember(
            role: BytesLike,
            index: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<string>;

        getRoleMemberCount(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getTokenBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<string>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        lockGatewayProxyBeacon(overrides?: CallOverrides): Promise<string>;

        mintGatewayProxyBeacon(overrides?: CallOverrides): Promise<string>;

        removeLockGateway(
            symbol_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        removeMintGateway(
            symbol_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        renAssetProxyBeacon(overrides?: CallOverrides): Promise<string>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        signatureVerifier(overrides?: CallOverrides): Promise<string>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides,
        ): Promise<boolean>;

        updateSignatureVerifier(
            nextSignatureVerifier_: string,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {
        "LogLockGatewayDeleted(string,string)"(
            symbol?: null,
            indexedSymbol?: string | null,
        ): TypedEventFilter<
            [string, string],
            { symbol: string; indexedSymbol: string }
        >;

        LogLockGatewayDeleted(
            symbol?: null,
            indexedSymbol?: string | null,
        ): TypedEventFilter<
            [string, string],
            { symbol: string; indexedSymbol: string }
        >;

        "LogLockGatewayUpdated(string,string,address,address)"(
            symbol?: null,
            indexedSymbol?: string | null,
            token?: string | null,
            gatewayContract?: string | null,
        ): TypedEventFilter<
            [string, string, string, string],
            {
                symbol: string;
                indexedSymbol: string;
                token: string;
                gatewayContract: string;
            }
        >;

        LogLockGatewayUpdated(
            symbol?: null,
            indexedSymbol?: string | null,
            token?: string | null,
            gatewayContract?: string | null,
        ): TypedEventFilter<
            [string, string, string, string],
            {
                symbol: string;
                indexedSymbol: string;
                token: string;
                gatewayContract: string;
            }
        >;

        "LogMintGatewayDeleted(string,string)"(
            symbol?: null,
            indexedSymbol?: string | null,
        ): TypedEventFilter<
            [string, string],
            { symbol: string; indexedSymbol: string }
        >;

        LogMintGatewayDeleted(
            symbol?: null,
            indexedSymbol?: string | null,
        ): TypedEventFilter<
            [string, string],
            { symbol: string; indexedSymbol: string }
        >;

        "LogMintGatewayUpdated(string,string,address,address)"(
            symbol?: null,
            indexedSymbol?: string | null,
            token?: string | null,
            gatewayContract?: string | null,
        ): TypedEventFilter<
            [string, string, string, string],
            {
                symbol: string;
                indexedSymbol: string;
                token: string;
                gatewayContract: string;
            }
        >;

        LogMintGatewayUpdated(
            symbol?: null,
            indexedSymbol?: string | null,
            token?: string | null,
            gatewayContract?: string | null,
        ): TypedEventFilter<
            [string, string, string, string],
            {
                symbol: string;
                indexedSymbol: string;
                token: string;
                gatewayContract: string;
            }
        >;

        "LogSignatureVerifierUpdated(address)"(
            newSignatureVerifier?: string | null,
        ): TypedEventFilter<[string], { newSignatureVerifier: string }>;

        LogSignatureVerifierUpdated(
            newSignatureVerifier?: string | null,
        ): TypedEventFilter<[string], { newSignatureVerifier: string }>;

        "RoleAdminChanged(bytes32,bytes32,bytes32)"(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null,
        ): TypedEventFilter<
            [string, string, string],
            { role: string; previousAdminRole: string; newAdminRole: string }
        >;

        RoleAdminChanged(
            role?: BytesLike | null,
            previousAdminRole?: BytesLike | null,
            newAdminRole?: BytesLike | null,
        ): TypedEventFilter<
            [string, string, string],
            { role: string; previousAdminRole: string; newAdminRole: string }
        >;

        "RoleGranted(bytes32,address,address)"(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
        >;

        RoleGranted(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
        >;

        "RoleRevoked(bytes32,address,address)"(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
        >;

        RoleRevoked(
            role?: BytesLike | null,
            account?: string | null,
            sender?: string | null,
        ): TypedEventFilter<
            [string, string, string],
            { role: string; account: string; sender: string }
        >;
    };

    estimateGas: {
        CAN_ADD_GATEWAYS(overrides?: CallOverrides): Promise<BigNumber>;

        CAN_UPDATE_GATEWAYS(overrides?: CallOverrides): Promise<BigNumber>;

        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

        __GatewayRegistry_init(
            chainName_: string,
            chainId_: BigNumberish,
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            adminAddress_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        __RenAssetFactory_init(
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        addLockGateway(
            symbol_: string,
            lockAsset_: string,
            lockGateway_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        addMintGateway(
            symbol_: string,
            renAsset_: string,
            mintGateway_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        chainId(overrides?: CallOverrides): Promise<BigNumber>;

        chainName(overrides?: CallOverrides): Promise<BigNumber>;

        deployLockGateway(
            symbol_: string,
            lockToken: string,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        deployMintGateway(
            symbol_: string,
            renAsset_: string,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        deployMintGatewayAndRenAsset(
            symbol_: string,
            erc20Name_: string,
            erc20Symbol_: string,
            erc20Decimals_: BigNumberish,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        getGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getLockAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getLockGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getLockGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getLockGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getMintGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getMintGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getMintGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRenAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleMember(
            role: BytesLike,
            index: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getRoleMemberCount(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        getTokenBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        lockGatewayProxyBeacon(overrides?: CallOverrides): Promise<BigNumber>;

        mintGatewayProxyBeacon(overrides?: CallOverrides): Promise<BigNumber>;

        removeLockGateway(
            symbol_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        removeMintGateway(
            symbol_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        renAssetProxyBeacon(overrides?: CallOverrides): Promise<BigNumber>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        signatureVerifier(overrides?: CallOverrides): Promise<BigNumber>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        updateSignatureVerifier(
            nextSignatureVerifier_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        CAN_ADD_GATEWAYS(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        CAN_UPDATE_GATEWAYS(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        DEFAULT_ADMIN_ROLE(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        __GatewayRegistry_init(
            chainName_: string,
            chainId_: BigNumberish,
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            adminAddress_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        __RenAssetFactory_init(
            renAssetProxyBeacon_: string,
            mintGatewayProxyBeacon_: string,
            lockGatewayProxyBeacon_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        addLockGateway(
            symbol_: string,
            lockAsset_: string,
            lockGateway_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        addMintGateway(
            symbol_: string,
            renAsset_: string,
            mintGateway_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        chainName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        deployLockGateway(
            symbol_: string,
            lockToken: string,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        deployMintGateway(
            symbol_: string,
            renAsset_: string,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        deployMintGatewayAndRenAsset(
            symbol_: string,
            erc20Name_: string,
            erc20Symbol_: string,
            erc20Decimals_: BigNumberish,
            version_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        getGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getLockAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getLockGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getLockGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getLockGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMintGatewayBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMintGatewayByToken(
            token_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getMintGatewaySymbols(
            from_: BigNumberish,
            count_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRenAssetBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleAdmin(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleMember(
            role: BytesLike,
            index: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getRoleMemberCount(
            role: BytesLike,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        getTokenBySymbol(
            tokenSymbol_: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        grantRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        hasRole(
            role: BytesLike,
            account: string,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        lockGatewayProxyBeacon(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        mintGatewayProxyBeacon(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        removeLockGateway(
            symbol_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        removeMintGateway(
            symbol_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        renAssetProxyBeacon(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        renounceRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        revokeRole(
            role: BytesLike,
            account: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        signatureVerifier(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        supportsInterface(
            interfaceId: BytesLike,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        updateSignatureVerifier(
            nextSignatureVerifier_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
