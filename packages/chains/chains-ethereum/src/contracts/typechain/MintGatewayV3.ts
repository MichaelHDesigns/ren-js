/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    BaseContract,
    BigNumber,
    BigNumberish,
    CallOverrides,
    ContractTransaction,
    ethers,
    EventFilter,
    Overrides,
    PopulatedTransaction,
    Signer,
} from "ethers";

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";

import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface MintGatewayV3Interface extends ethers.utils.Interface {
    functions: {
        "__GatewayStateManager_init(string,string,address,address)": FunctionFragment;
        "__MintGateway_init(string,string,address,address)": FunctionFragment;
        "_burnFromPreviousGateway(bytes,uint256,address)": FunctionFragment;
        "_mintFromPreviousGateway(bytes32,uint256,bytes32,bytes,address)": FunctionFragment;
        "asset()": FunctionFragment;
        "burn(bytes,uint256)": FunctionFragment;
        "burnWithPayload(string,string,bytes,uint256)": FunctionFragment;
        "chain()": FunctionFragment;
        "eventNonce()": FunctionFragment;
        "mint(bytes32,uint256,bytes32,bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "previousGateway()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "selectorHash()": FunctionFragment;
        "signatureVerifier()": FunctionFragment;
        "status(bytes32)": FunctionFragment;
        "token()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "transferTokenOwnership(address)": FunctionFragment;
        "updateAsset(string)": FunctionFragment;
        "updateChain(string)": FunctionFragment;
        "updatePreviousGateway(address)": FunctionFragment;
        "updateSignatureVerifier(address)": FunctionFragment;
        "updateToken(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "__GatewayStateManager_init",
        values: [string, string, string, string],
    ): string;
    encodeFunctionData(
        functionFragment: "__MintGateway_init",
        values: [string, string, string, string],
    ): string;
    encodeFunctionData(
        functionFragment: "_burnFromPreviousGateway",
        values: [BytesLike, BigNumberish, string],
    ): string;
    encodeFunctionData(
        functionFragment: "_mintFromPreviousGateway",
        values: [BytesLike, BigNumberish, BytesLike, BytesLike, string],
    ): string;
    encodeFunctionData(functionFragment: "asset", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "burn",
        values: [BytesLike, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "burnWithPayload",
        values: [string, string, BytesLike, BigNumberish],
    ): string;
    encodeFunctionData(functionFragment: "chain", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "eventNonce",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [BytesLike, BigNumberish, BytesLike, BytesLike],
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "previousGateway",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "renounceOwnership",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "selectorHash",
        values?: undefined,
    ): string;
    encodeFunctionData(
        functionFragment: "signatureVerifier",
        values?: undefined,
    ): string;
    encodeFunctionData(functionFragment: "status", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "transferOwnership",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "transferTokenOwnership",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "updateAsset",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "updateChain",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "updatePreviousGateway",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "updateSignatureVerifier",
        values: [string],
    ): string;
    encodeFunctionData(
        functionFragment: "updateToken",
        values: [string],
    ): string;

    decodeFunctionResult(
        functionFragment: "__GatewayStateManager_init",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "__MintGateway_init",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "_burnFromPreviousGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "_mintFromPreviousGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "burnWithPayload",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: "chain", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "eventNonce",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "previousGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "renounceOwnership",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "selectorHash",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "signatureVerifier",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "transferOwnership",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "transferTokenOwnership",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "updateAsset",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "updateChain",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "updatePreviousGateway",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "updateSignatureVerifier",
        data: BytesLike,
    ): Result;
    decodeFunctionResult(
        functionFragment: "updateToken",
        data: BytesLike,
    ): Result;

    events: {
        "LogAssetUpdated(string,bytes32)": EventFragment;
        "LogBurn(bytes,uint256,uint256,bytes)": EventFragment;
        "LogBurnToChain(string,string,bytes,uint256,uint256,string,string)": EventFragment;
        "LogChainUpdated(string,bytes32)": EventFragment;
        "LogMint(address,uint256,uint256,bytes32)": EventFragment;
        "LogPreviousGatewayUpdated(address)": EventFragment;
        "LogSignatureVerifierUpdated(address)": EventFragment;
        "LogTokenUpdated(address)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "LogAssetUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogBurn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogBurnToChain"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogChainUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogMint"): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "LogPreviousGatewayUpdated",
    ): EventFragment;
    getEvent(
        nameOrSignatureOrTopic: "LogSignatureVerifierUpdated",
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "LogTokenUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type LogAssetUpdatedEvent = TypedEvent<
    [string, string],
    { _asset: string; _selectorHash: string }
>;

export type LogAssetUpdatedEventFilter = TypedEventFilter<LogAssetUpdatedEvent>;

export type LogBurnEvent = TypedEvent<
    [string, BigNumber, BigNumber, string],
    { to: string; amount: BigNumber; burnNonce: BigNumber; indexedTo: string }
>;

export type LogBurnEventFilter = TypedEventFilter<LogBurnEvent>;

export type LogBurnToChainEvent = TypedEvent<
    [string, string, string, BigNumber, BigNumber, string, string],
    {
        recipientAddress: string;
        recipientChain: string;
        recipientPayload: string;
        amount: BigNumber;
        burnNonce: BigNumber;
        recipientAddressIndexed: string;
        recipientChainIndexed: string;
    }
>;

export type LogBurnToChainEventFilter = TypedEventFilter<LogBurnToChainEvent>;

export type LogChainUpdatedEvent = TypedEvent<
    [string, string],
    { _chain: string; _selectorHash: string }
>;

export type LogChainUpdatedEventFilter = TypedEventFilter<LogChainUpdatedEvent>;

export type LogMintEvent = TypedEvent<
    [string, BigNumber, BigNumber, string],
    { to: string; amount: BigNumber; sigHash: BigNumber; nHash: string }
>;

export type LogMintEventFilter = TypedEventFilter<LogMintEvent>;

export type LogPreviousGatewayUpdatedEvent = TypedEvent<
    [string],
    { _newPreviousGateway: string }
>;

export type LogPreviousGatewayUpdatedEventFilter =
    TypedEventFilter<LogPreviousGatewayUpdatedEvent>;

export type LogSignatureVerifierUpdatedEvent = TypedEvent<
    [string],
    { _newSignatureVerifier: string }
>;

export type LogSignatureVerifierUpdatedEventFilter =
    TypedEventFilter<LogSignatureVerifierUpdatedEvent>;

export type LogTokenUpdatedEvent = TypedEvent<[string], { _newToken: string }>;

export type LogTokenUpdatedEventFilter = TypedEventFilter<LogTokenUpdatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;

export interface MintGatewayV3 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: MintGatewayV3Interface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>,
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>,
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        __GatewayStateManager_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        __MintGateway_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        _burnFromPreviousGateway(
            recipient: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        asset(overrides?: CallOverrides): Promise<[string]>;

        "burn(bytes,uint256)"(
            recipient: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        "burn(string,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        chain(overrides?: CallOverrides): Promise<[string]>;

        eventNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        previousGateway(overrides?: CallOverrides): Promise<[string]>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        selectorHash(overrides?: CallOverrides): Promise<[string]>;

        signatureVerifier(overrides?: CallOverrides): Promise<[string]>;

        status(hash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

        token(overrides?: CallOverrides): Promise<[string]>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferTokenOwnership(
            nextTokenOwner_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateAsset(
            nextAsset: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateChain(
            nextChain: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updatePreviousGateway(
            nextPreviousGateway: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateSignatureVerifier(
            nextSignatureVerifier: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        updateToken(
            nextToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    __GatewayStateManager_init(
        chain_: string,
        asset_: string,
        signatureVerifier_: string,
        token_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    __MintGateway_init(
        chain_: string,
        asset_: string,
        signatureVerifier_: string,
        token_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    _burnFromPreviousGateway(
        recipient: BytesLike,
        amount: BigNumberish,
        caller: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    _mintFromPreviousGateway(
        pHash: BytesLike,
        amount: BigNumberish,
        nHash: BytesLike,
        sig: BytesLike,
        caller: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<string>;

    "burn(bytes,uint256)"(
        recipient: BytesLike,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    "burn(string,uint256)"(
        recipient: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    burnWithPayload(
        recipientAddress: string,
        recipientChain: string,
        recipientPayload: BytesLike,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    chain(overrides?: CallOverrides): Promise<string>;

    eventNonce(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
        pHash: BytesLike,
        amount: BigNumberish,
        nHash: BytesLike,
        sig: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    previousGateway(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    selectorHash(overrides?: CallOverrides): Promise<string>;

    signatureVerifier(overrides?: CallOverrides): Promise<string>;

    status(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferTokenOwnership(
        nextTokenOwner_: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAsset(
        nextAsset: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateChain(
        nextChain: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePreviousGateway(
        nextPreviousGateway: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateSignatureVerifier(
        nextSignatureVerifier: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateToken(
        nextToken: string,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        __GatewayStateManager_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        __MintGateway_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        _burnFromPreviousGateway(
            recipient: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        asset(overrides?: CallOverrides): Promise<string>;

        "burn(bytes,uint256)"(
            recipient: BytesLike,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        "burn(string,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        chain(overrides?: CallOverrides): Promise<string>;

        eventNonce(overrides?: CallOverrides): Promise<BigNumber>;

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<string>;

        previousGateway(overrides?: CallOverrides): Promise<string>;

        renounceOwnership(overrides?: CallOverrides): Promise<void>;

        selectorHash(overrides?: CallOverrides): Promise<string>;

        signatureVerifier(overrides?: CallOverrides): Promise<string>;

        status(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

        token(overrides?: CallOverrides): Promise<string>;

        transferOwnership(
            newOwner: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        transferTokenOwnership(
            nextTokenOwner_: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateAsset(
            nextAsset: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateChain(
            nextChain: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        updatePreviousGateway(
            nextPreviousGateway: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateSignatureVerifier(
            nextSignatureVerifier: string,
            overrides?: CallOverrides,
        ): Promise<void>;

        updateToken(
            nextToken: string,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {
        "LogAssetUpdated(string,bytes32)"(
            _asset?: null,
            _selectorHash?: null,
        ): LogAssetUpdatedEventFilter;
        LogAssetUpdated(
            _asset?: null,
            _selectorHash?: null,
        ): LogAssetUpdatedEventFilter;

        "LogBurn(bytes,uint256,uint256,bytes)"(
            to?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            indexedTo?: BytesLike | null,
        ): LogBurnEventFilter;
        LogBurn(
            to?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            indexedTo?: BytesLike | null,
        ): LogBurnEventFilter;

        "LogBurnToChain(string,string,bytes,uint256,uint256,string,string)"(
            recipientAddress?: null,
            recipientChain?: null,
            recipientPayload?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            recipientAddressIndexed?: string | null,
            recipientChainIndexed?: string | null,
        ): LogBurnToChainEventFilter;
        LogBurnToChain(
            recipientAddress?: null,
            recipientChain?: null,
            recipientPayload?: null,
            amount?: null,
            burnNonce?: BigNumberish | null,
            recipientAddressIndexed?: string | null,
            recipientChainIndexed?: string | null,
        ): LogBurnToChainEventFilter;

        "LogChainUpdated(string,bytes32)"(
            _chain?: null,
            _selectorHash?: null,
        ): LogChainUpdatedEventFilter;
        LogChainUpdated(
            _chain?: null,
            _selectorHash?: null,
        ): LogChainUpdatedEventFilter;

        "LogMint(address,uint256,uint256,bytes32)"(
            to?: string | null,
            amount?: null,
            sigHash?: BigNumberish | null,
            nHash?: BytesLike | null,
        ): LogMintEventFilter;
        LogMint(
            to?: string | null,
            amount?: null,
            sigHash?: BigNumberish | null,
            nHash?: BytesLike | null,
        ): LogMintEventFilter;

        "LogPreviousGatewayUpdated(address)"(
            _newPreviousGateway?: string | null,
        ): LogPreviousGatewayUpdatedEventFilter;
        LogPreviousGatewayUpdated(
            _newPreviousGateway?: string | null,
        ): LogPreviousGatewayUpdatedEventFilter;

        "LogSignatureVerifierUpdated(address)"(
            _newSignatureVerifier?: string | null,
        ): LogSignatureVerifierUpdatedEventFilter;
        LogSignatureVerifierUpdated(
            _newSignatureVerifier?: string | null,
        ): LogSignatureVerifierUpdatedEventFilter;

        "LogTokenUpdated(address)"(
            _newToken?: string | null,
        ): LogTokenUpdatedEventFilter;
        LogTokenUpdated(_newToken?: string | null): LogTokenUpdatedEventFilter;

        "OwnershipTransferred(address,address)"(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): OwnershipTransferredEventFilter;
        OwnershipTransferred(
            previousOwner?: string | null,
            newOwner?: string | null,
        ): OwnershipTransferredEventFilter;
    };

    estimateGas: {
        __GatewayStateManager_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        __MintGateway_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        _burnFromPreviousGateway(
            recipient: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        asset(overrides?: CallOverrides): Promise<BigNumber>;

        "burn(bytes,uint256)"(
            recipient: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        "burn(string,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        chain(overrides?: CallOverrides): Promise<BigNumber>;

        eventNonce(overrides?: CallOverrides): Promise<BigNumber>;

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        previousGateway(overrides?: CallOverrides): Promise<BigNumber>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        selectorHash(overrides?: CallOverrides): Promise<BigNumber>;

        signatureVerifier(overrides?: CallOverrides): Promise<BigNumber>;

        status(hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

        token(overrides?: CallOverrides): Promise<BigNumber>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferTokenOwnership(
            nextTokenOwner_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateAsset(
            nextAsset: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateChain(
            nextChain: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updatePreviousGateway(
            nextPreviousGateway: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateSignatureVerifier(
            nextSignatureVerifier: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        updateToken(
            nextToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        __GatewayStateManager_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        __MintGateway_init(
            chain_: string,
            asset_: string,
            signatureVerifier_: string,
            token_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        _burnFromPreviousGateway(
            recipient: BytesLike,
            amount: BigNumberish,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        _mintFromPreviousGateway(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            caller: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        "burn(bytes,uint256)"(
            recipient: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        "burn(string,uint256)"(
            recipient: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        burnWithPayload(
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        chain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        eventNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        mint(
            pHash: BytesLike,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        previousGateway(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        renounceOwnership(
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        selectorHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        signatureVerifier(
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        status(
            hash: BytesLike,
            overrides?: CallOverrides,
        ): Promise<PopulatedTransaction>;

        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        transferOwnership(
            newOwner: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferTokenOwnership(
            nextTokenOwner_: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateAsset(
            nextAsset: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateChain(
            nextChain: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updatePreviousGateway(
            nextPreviousGateway: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateSignatureVerifier(
            nextSignatureVerifier: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        updateToken(
            nextToken: string,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
