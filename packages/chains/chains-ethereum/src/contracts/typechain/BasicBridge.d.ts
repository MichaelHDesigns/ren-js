/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    BaseContract,
    BigNumber,
    BigNumberish,
    CallOverrides,
    ContractTransaction,
    ethers,
    EventFilter,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
} from "ethers";

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";

import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface BasicBridgeInterface extends ethers.utils.Interface {
    functions: {
        "burn(string,string,uint256)": FunctionFragment;
        "lock(string,string,string,bytes,uint256)": FunctionFragment;
        "mint(string,address,uint256,bytes32,bytes)": FunctionFragment;
        "release(string,address,uint256,bytes32,bytes)": FunctionFragment;
        "transferWithLog(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "burn",
        values: [string, string, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "lock",
        values: [string, string, string, BytesLike, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [string, string, BigNumberish, BytesLike, BytesLike],
    ): string;
    encodeFunctionData(
        functionFragment: "release",
        values: [string, string, BigNumberish, BytesLike, BytesLike],
    ): string;
    encodeFunctionData(
        functionFragment: "transferWithLog",
        values: [string],
    ): string;

    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "transferWithLog",
        data: BytesLike,
    ): Result;

    events: {
        "LogTransferred(address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "LogTransferred"): EventFragment;
}

export type LogTransferredEvent = TypedEvent<
    [string, BigNumber],
    { to: string; amount: BigNumber }
>;

export type LogTransferredEventFilter = TypedEventFilter<LogTransferredEvent>;

export interface BasicBridge extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: BasicBridgeInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>,
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>,
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        burn(
            symbol: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        lock(
            symbol: string,
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        mint(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        release(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        transferWithLog(
            to: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    burn(
        symbol: string,
        to: string,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lock(
        symbol: string,
        recipientAddress: string,
        recipientChain: string,
        recipientPayload: BytesLike,
        amount: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
        symbol: string,
        recipient: string,
        amount: BigNumberish,
        nHash: BytesLike,
        sig: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    release(
        symbol: string,
        recipient: string,
        amount: BigNumberish,
        nHash: BytesLike,
        sig: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferWithLog(
        to: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        burn(
            symbol: string,
            to: string,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        lock(
            symbol: string,
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        mint(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<void>;

        release(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: CallOverrides,
        ): Promise<void>;

        transferWithLog(to: string, overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "LogTransferred(address,uint256)"(
            to?: string | null,
            amount?: null,
        ): LogTransferredEventFilter;
        LogTransferred(
            to?: string | null,
            amount?: null,
        ): LogTransferredEventFilter;
    };

    estimateGas: {
        burn(
            symbol: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        lock(
            symbol: string,
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        mint(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        release(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        transferWithLog(
            to: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        burn(
            symbol: string,
            to: string,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        lock(
            symbol: string,
            recipientAddress: string,
            recipientChain: string,
            recipientPayload: BytesLike,
            amount: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        mint(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        release(
            symbol: string,
            recipient: string,
            amount: BigNumberish,
            nHash: BytesLike,
            sig: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        transferWithLog(
            to: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
