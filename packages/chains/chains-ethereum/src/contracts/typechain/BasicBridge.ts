/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    BaseContract,
    BigNumber,
    BigNumberish,
    CallOverrides,
    ContractTransaction,
    ethers,
    EventFilter,
    Overrides,
    PopulatedTransaction,
    Signer,
} from "ethers";

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";

import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";

interface BasicBridgeInterface extends ethers.utils.Interface {
    functions: {
        "burn(string,string,uint256)": FunctionFragment;
        "lock(string,string,string,bytes,uint256)": FunctionFragment;
        "mint(string,address,uint256,bytes32,bytes)": FunctionFragment;
        "release(string,address,uint256,bytes32,bytes)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "burn",
        values: [string, string, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "lock",
        values: [string, string, string, BytesLike, BigNumberish],
    ): string;
    encodeFunctionData(
        functionFragment: "mint",
        values: [string, string, BigNumberish, BytesLike, BytesLike],
    ): string;
    encodeFunctionData(
        functionFragment: "release",
        values: [string, string, BigNumberish, BytesLike, BytesLike],
    ): string;

    decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;

    events: {};
}

export interface BasicBridge extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    listeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
    off<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    on<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    once<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
        listener: TypedListener<EventArgsArray, EventArgsObject>,
    ): this;
    removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
        eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    ): this;

    listeners(eventName?: string): Array<Listener>;
    off(eventName: string, listener: Listener): this;
    on(eventName: string, listener: Listener): this;
    once(eventName: string, listener: Listener): this;
    removeListener(eventName: string, listener: Listener): this;
    removeAllListeners(eventName?: string): this;

    queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
        event: TypedEventFilter<EventArgsArray, EventArgsObject>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

    interface: BasicBridgeInterface;

    functions: {
        burn(
            symbol_: string,
            to_: string,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        lock(
            symbol_: string,
            recipientAddress_: string,
            recipientChain_: string,
            recipientPayload_: BytesLike,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        mint(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;

        release(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    burn(
        symbol_: string,
        to_: string,
        amount_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lock(
        symbol_: string,
        recipientAddress_: string,
        recipientChain_: string,
        recipientPayload_: BytesLike,
        amount_: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    mint(
        symbol_: string,
        recipient_: string,
        amount_: BigNumberish,
        nHash_: BytesLike,
        sig_: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    release(
        symbol_: string,
        recipient_: string,
        amount_: BigNumberish,
        nHash_: BytesLike,
        sig_: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        burn(
            symbol_: string,
            to_: string,
            amount_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        lock(
            symbol_: string,
            recipientAddress_: string,
            recipientChain_: string,
            recipientPayload_: BytesLike,
            amount_: BigNumberish,
            overrides?: CallOverrides,
        ): Promise<void>;

        mint(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: CallOverrides,
        ): Promise<void>;

        release(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: CallOverrides,
        ): Promise<void>;
    };

    filters: {};

    estimateGas: {
        burn(
            symbol_: string,
            to_: string,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        lock(
            symbol_: string,
            recipientAddress_: string,
            recipientChain_: string,
            recipientPayload_: BytesLike,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        mint(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;

        release(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        burn(
            symbol_: string,
            to_: string,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        lock(
            symbol_: string,
            recipientAddress_: string,
            recipientChain_: string,
            recipientPayload_: BytesLike,
            amount_: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        mint(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;

        release(
            symbol_: string,
            recipient_: string,
            amount_: BigNumberish,
            nHash_: BytesLike,
            sig_: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
