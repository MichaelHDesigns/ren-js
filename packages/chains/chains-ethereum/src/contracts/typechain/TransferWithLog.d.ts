/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
    BaseContract,
    BigNumber,
    BigNumberish,
    CallOverrides,
    ContractTransaction,
    ethers,
    EventFilter,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
} from "ethers";

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";

import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
} from "./common";

export interface TransferWithLogInterface extends ethers.utils.Interface {
    functions: {
        "transferWithLog(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "transferWithLog",
        values: [string],
    ): string;

    decodeFunctionResult(
        functionFragment: "transferWithLog",
        data: BytesLike,
    ): Result;

    events: {
        "LogTransferred(address,address,uint256)": EventFragment;
    };

    getEvent(nameOrSignatureOrTopic: "LogTransferred"): EventFragment;
}

export type LogTransferredEvent = TypedEvent<
    [string, string, BigNumber],
    { from: string; to: string; amount: BigNumber }
>;

export type LogTransferredEventFilter = TypedEventFilter<LogTransferredEvent>;

export interface TransferWithLog extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: TransferWithLogInterface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined,
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>,
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>,
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        transferWithLog(
            to: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> },
        ): Promise<ContractTransaction>;
    };

    transferWithLog(
        to: string,
        overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    callStatic: {
        transferWithLog(to: string, overrides?: CallOverrides): Promise<void>;
    };

    filters: {
        "LogTransferred(address,address,uint256)"(
            from?: string | null,
            to?: string | null,
            amount?: null,
        ): LogTransferredEventFilter;
        LogTransferred(
            from?: string | null,
            to?: string | null,
            amount?: null,
        ): LogTransferredEventFilter;
    };

    estimateGas: {
        transferWithLog(
            to: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> },
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        transferWithLog(
            to: string,
            overrides?: PayableOverrides & { from?: string | Promise<string> },
        ): Promise<PopulatedTransaction>;
    };
}
